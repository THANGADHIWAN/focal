"""updated product db

Revision ID: 4409bfee215d
Revises: 
Create Date: 2025-08-06 23:19:10.050644

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4409bfee215d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('material',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('material_type', sa.String(length=20), nullable=True),
    sa.Column('cas_number', sa.String(length=100), nullable=True),
    sa.Column('manufacturer', sa.String(length=100), nullable=True),
    sa.Column('grade', sa.String(length=100), nullable=True),
    sa.Column('unit_of_measure', sa.String(length=50), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('is_controlled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', name='productstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('matrix_type', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('storage_location',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('location_name', sa.String(length=100), nullable=False),
    sa.Column('location_code', sa.String(length=50), nullable=True),
    sa.Column('temperature_celsius', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('humidity_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('location_code')
    )
    op.create_table('test_method',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('validated', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('audit_trail',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(length=100), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('old_value', sa.JSON(), nullable=True),
    sa.Column('new_value', sa.JSON(), nullable=True),
    sa.Column('justification', sa.Text(), nullable=True),
    sa.Column('signature', sa.String(length=255), nullable=True),
    sa.Column('performed_at', sa.DateTime(), nullable=True),
    sa.Column('ip_address', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('electronic_signature',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(length=100), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('signed_by', sa.UUID(), nullable=False),
    sa.Column('signature_type', sa.String(length=20), nullable=False),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('signed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['signed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instrument',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('instrument_type', sa.String(length=100), nullable=True),
    sa.Column('serial_number', sa.String(length=100), nullable=True),
    sa.Column('manufacturer', sa.String(length=100), nullable=True),
    sa.Column('model_number', sa.String(length=100), nullable=True),
    sa.Column('purchase_date', sa.DateTime(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('qualification_status', sa.String(length=20), nullable=True),
    sa.Column('maintenance_type', sa.String(length=20), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['storage_location.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('serial_number')
    )
    op.create_table('material_lot',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('material_id', sa.Integer(), nullable=False),
    sa.Column('lot_number', sa.String(length=100), nullable=False),
    sa.Column('received_date', sa.DateTime(), nullable=True),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.Column('received_quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('current_quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('storage_location_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['material_id'], ['material.id'], ),
    sa.ForeignKeyConstraint(['storage_location_id'], ['storage_location.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage_room',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('room_name', sa.String(length=100), nullable=False),
    sa.Column('floor', sa.Integer(), nullable=True),
    sa.Column('building', sa.String(length=100), nullable=True),
    sa.Column('access_control', sa.Boolean(), nullable=False),
    sa.Column('temperature_range', sa.String(length=50), nullable=True),
    sa.Column('humidity_range', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('storage_location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['storage_location_id'], ['storage_location.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('room_name')
    )
    op.create_table('test_master',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_method_id', sa.Integer(), nullable=False),
    sa.Column('test_name', sa.String(length=150), nullable=False),
    sa.Column('test_code', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('frequency', sa.String(length=50), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_method_id'], ['test_method.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('test_code')
    )
    op.create_table('test_parameter',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_method_id', sa.Integer(), nullable=False),
    sa.Column('parameter_name', sa.String(length=150), nullable=False),
    sa.Column('parameter_type', sa.Enum('NUMERIC', 'TEXT', 'BOOLEAN', 'DATETIME', name='parametertype'), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_method_id'], ['test_method.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_procedure',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_method_id', sa.Integer(), nullable=False),
    sa.Column('procedure_name', sa.String(length=150), nullable=False),
    sa.Column('procedure_description', sa.Text(), nullable=True),
    sa.Column('steps_order', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_method_id'], ['test_method.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('freezer',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('freezer_name', sa.String(length=100), nullable=False),
    sa.Column('freezer_type', sa.String(length=100), nullable=True),
    sa.Column('storage_room_id', sa.Integer(), nullable=True),
    sa.Column('temperature_range', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['storage_room_id'], ['storage_room.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instrument_calibration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('instrument_id', sa.Integer(), nullable=False),
    sa.Column('calibration_date', sa.DateTime(), nullable=True),
    sa.Column('calibrated_by', sa.String(length=100), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('calibration_status', sa.String(length=20), nullable=True),
    sa.Column('certificate_link', sa.String(length=255), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instrument_maintenance_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('instrument_id', sa.Integer(), nullable=False),
    sa.Column('maintenance_date', sa.DateTime(), nullable=True),
    sa.Column('performed_by', sa.String(length=100), nullable=True),
    sa.Column('maintenance_type', sa.String(length=20), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('next_due_date', sa.DateTime(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('material_inventory_adjustment',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('material_lot_id', sa.Integer(), nullable=False),
    sa.Column('adjusted_by', sa.String(length=100), nullable=True),
    sa.Column('adjusted_on', sa.DateTime(), nullable=True),
    sa.Column('adjustment_type', sa.String(length=20), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['material_lot_id'], ['material_lot.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_specification',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_parameter_id', sa.Integer(), nullable=False),
    sa.Column('specification_name', sa.String(length=150), nullable=False),
    sa.Column('specification_type', sa.Enum('EXACT', 'RANGE', 'LESS_THAN', 'GREATER_THAN', name='specificationtype'), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('min_value', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('max_value', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_parameter_id'], ['test_parameter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_step',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_procedure_id', sa.Integer(), nullable=False),
    sa.Column('step_number', sa.Integer(), nullable=False),
    sa.Column('step_description', sa.Text(), nullable=True),
    sa.Column('expected_result', sa.Text(), nullable=True),
    sa.Column('actual_result', sa.Text(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_procedure_id'], ['test_procedure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('box',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('box_code', sa.String(length=50), nullable=False),
    sa.Column('box_type', sa.String(length=100), nullable=True),
    sa.Column('rack', sa.String(length=50), nullable=True),
    sa.Column('shelf', sa.String(length=50), nullable=True),
    sa.Column('drawer', sa.String(length=50), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('freezer_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['freezer_id'], ['freezer.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('box_code')
    )
    op.create_table('test_step_execution',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_step_id', sa.Integer(), nullable=False),
    sa.Column('executed_by', sa.String(length=100), nullable=True),
    sa.Column('executed_on', sa.DateTime(), nullable=True),
    sa.Column('result', sa.Enum('PASS', 'FAIL', 'NA', name='stepresultenum'), nullable=False),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['test_step_id'], ['test_step.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_code', sa.String(length=50), nullable=False),
    sa.Column('sample_name', sa.String(length=50), nullable=True),
    sa.Column('sample_type_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=100), nullable=False),
    sa.Column('box_id', sa.Integer(), nullable=True),
    sa.Column('volume_ml', sa.Integer(), nullable=True),
    sa.Column('received_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='samplepriority'), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_aliquot', sa.Boolean(), nullable=False),
    sa.Column('number_of_aliquots', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('purpose', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['box_id'], ['box.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['sample_type_id'], ['sample_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sample_code')
    )
    op.create_table('aliquot',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('aliquot_code', sa.String(length=50), nullable=False),
    sa.Column('volume_ml', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('LOGGED_IN', 'IN_PROGRESS', 'COMPLETED', 'ARCHIVED', name='samplestatus'), nullable=False),
    sa.Column('assigned_to', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('purpose', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('aliquot_code')
    )
    op.create_table('material_usage_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('material_lot_id', sa.Integer(), nullable=False),
    sa.Column('used_by', sa.String(length=100), nullable=True),
    sa.Column('used_on', sa.DateTime(), nullable=True),
    sa.Column('used_quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('purpose', sa.String(length=255), nullable=True),
    sa.Column('associated_sample_id', sa.Integer(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['associated_sample_id'], ['sample.id'], ),
    sa.ForeignKeyConstraint(['material_lot_id'], ['material_lot.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample_status_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('changed_by', sa.String(length=100), nullable=True),
    sa.Column('changed_at', sa.DateTime(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage_transaction_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('from_location_id', sa.Integer(), nullable=True),
    sa.Column('to_location_id', sa.Integer(), nullable=True),
    sa.Column('moved_by', sa.String(length=100), nullable=True),
    sa.Column('moved_at', sa.DateTime(), nullable=True),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['from_location_id'], ['storage_location.id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.ForeignKeyConstraint(['to_location_id'], ['storage_location.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chain_of_custody',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('aliquot_id', sa.Integer(), nullable=False),
    sa.Column('transferred_from', sa.String(length=100), nullable=False),
    sa.Column('transferred_to', sa.String(length=100), nullable=False),
    sa.Column('transfer_date', sa.DateTime(), nullable=True),
    sa.Column('condition_on_transfer', sa.Text(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['aliquot_id'], ['aliquot.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory_slot',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('slot_code', sa.String(length=50), nullable=False),
    sa.Column('is_occupied', sa.Boolean(), nullable=False),
    sa.Column('aliquot_id', sa.Integer(), nullable=True),
    sa.Column('box_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['aliquot_id'], ['aliquot.id'], ),
    sa.ForeignKeyConstraint(['box_id'], ['box.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('aliquot_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('test_master_id', sa.Integer(), nullable=False),
    sa.Column('analyst_id', sa.UUID(), nullable=True),
    sa.Column('instrument_id', sa.Integer(), nullable=True),
    sa.Column('scheduled_date', sa.DateTime(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='teststatus'), nullable=False),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['aliquot_id'], ['aliquot.id'], ),
    sa.ForeignKeyConstraint(['analyst_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.ForeignKeyConstraint(['test_master_id'], ['test_master.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('oos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('test_id', sa.Integer(), nullable=True),
    sa.Column('instrument_id', sa.Integer(), nullable=True),
    sa.Column('test_method_id', sa.Integer(), nullable=True),
    sa.Column('result_value', sa.Float(), nullable=True),
    sa.Column('specification_limit_low', sa.Float(), nullable=True),
    sa.Column('specification_limit_high', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('result_status', sa.String(length=50), nullable=True),
    sa.Column('analyst_name', sa.String(length=100), nullable=True),
    sa.Column('test_location', sa.String(length=100), nullable=True),
    sa.Column('oos_detected_at', sa.DateTime(), nullable=True),
    sa.Column('oos_flag_auto', sa.Boolean(), nullable=False),
    sa.Column('oos_flag_manual', sa.Boolean(), nullable=False),
    sa.Column('notification_timestamp', sa.DateTime(), nullable=True),
    sa.Column('oos_reference_number', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], ),
    sa.ForeignKeyConstraint(['test_method_id'], ['test_method.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_result',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=False),
    sa.Column('test_parameter_id', sa.Integer(), nullable=False),
    sa.Column('result_value', sa.String(length=100), nullable=True),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('specification_limit', sa.String(length=100), nullable=True),
    sa.Column('result_status', sa.Enum('PASS', 'FAIL', 'OOS', 'INVALID', name='resultstatusenum'), nullable=False),
    sa.Column('result_date', sa.DateTime(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], ),
    sa.ForeignKeyConstraint(['test_parameter_id'], ['test_parameter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('deviation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('reported_by', sa.UUID(), nullable=True),
    sa.Column('reported_at', sa.DateTime(), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('deviation_type', sa.String(length=100), nullable=True),
    sa.Column('severity', sa.Enum('MINOR', 'MAJOR', 'CRITICAL', name='deviationseverity'), nullable=False),
    sa.Column('deviation_status', sa.Enum('OPEN', 'UNDER_INVESTIGATION', 'CLOSED', name='deviationstatus'), nullable=False),
    sa.Column('gmp_impact', sa.Boolean(), nullable=True),
    sa.Column('process_impacted', sa.String(length=100), nullable=True),
    sa.Column('related_sop_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('root_cause_method', sa.String(length=100), nullable=True),
    sa.Column('root_cause_description', sa.Text(), nullable=True),
    sa.Column('investigation_comments', sa.Text(), nullable=True),
    sa.Column('deviation_reference_number', sa.String(length=100), nullable=True),
    sa.Column('linked_oos_id', sa.Integer(), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approval_timestamp', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['linked_oos_id'], ['oos.id'], ),
    sa.ForeignKeyConstraint(['related_sop_id'], ['test_procedure.id'], ),
    sa.ForeignKeyConstraint(['reported_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('oos_investigation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('oos_id', sa.Integer(), nullable=False),
    sa.Column('phase', sa.Enum('PHASE1_LAB', 'PHASE2_QC', 'PHASE3_QA', name='investigationphase'), nullable=False),
    sa.Column('investigation_start', sa.DateTime(), nullable=True),
    sa.Column('investigator_name', sa.String(length=100), nullable=True),
    sa.Column('raw_data_reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('retest_initiated_at', sa.DateTime(), nullable=True),
    sa.Column('retest_result', sa.Float(), nullable=True),
    sa.Column('is_retest_passed', sa.Boolean(), nullable=True),
    sa.Column('analyst_interview_at', sa.DateTime(), nullable=True),
    sa.Column('root_cause_method', sa.String(length=100), nullable=True),
    sa.Column('root_cause_description', sa.Text(), nullable=True),
    sa.Column('conclusion', sa.String(length=255), nullable=True),
    sa.Column('qa_reviewer_name', sa.String(length=100), nullable=True),
    sa.Column('investigation_complete_at', sa.DateTime(), nullable=True),
    sa.Column('documents_uploaded_at', sa.DateTime(), nullable=True),
    sa.Column('capa_required', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['oos_id'], ['oos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('capa',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('initiated_by', sa.UUID(), nullable=True),
    sa.Column('initiation_timestamp', sa.DateTime(), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('root_cause_method', sa.String(length=100), nullable=True),
    sa.Column('root_cause_description', sa.Text(), nullable=True),
    sa.Column('action_type', sa.Enum('CORRECTIVE', 'PREVENTIVE', 'BOTH', name='capaactiontype'), nullable=False),
    sa.Column('corrective_action_plan', sa.Text(), nullable=True),
    sa.Column('preventive_action_plan', sa.Text(), nullable=True),
    sa.Column('action_owner', sa.UUID(), nullable=True),
    sa.Column('action_due_date', sa.DateTime(), nullable=True),
    sa.Column('task_completed_at', sa.DateTime(), nullable=True),
    sa.Column('voe_performed_by', sa.UUID(), nullable=True),
    sa.Column('voe_outcome', sa.Text(), nullable=True),
    sa.Column('approval_by', sa.UUID(), nullable=True),
    sa.Column('approval_timestamp', sa.DateTime(), nullable=True),
    sa.Column('linked_deviation_id', sa.Integer(), nullable=True),
    sa.Column('linked_oos_id', sa.Integer(), nullable=True),
    sa.Column('capa_status', sa.Enum('OPEN', 'IN_PROGRESS', 'CLOSED', 'VERIFIED', 'CANCELLED', name='capastatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['action_owner'], ['users.id'], ),
    sa.ForeignKeyConstraint(['approval_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['initiated_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['linked_deviation_id'], ['deviation.id'], ),
    sa.ForeignKeyConstraint(['linked_oos_id'], ['oos.id'], ),
    sa.ForeignKeyConstraint(['voe_performed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('capa_action',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('capa_id', sa.Integer(), nullable=False),
    sa.Column('task_description', sa.Text(), nullable=True),
    sa.Column('assigned_to', sa.UUID(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('task_status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', name='capataskstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], ),
    sa.ForeignKeyConstraint(['capa_id'], ['capa.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('capa_action')
    op.drop_table('capa')
    op.drop_table('oos_investigation')
    op.drop_table('deviation')
    op.drop_table('test_result')
    op.drop_table('oos')
    op.drop_table('test')
    op.drop_table('inventory_slot')
    op.drop_table('chain_of_custody')
    op.drop_table('storage_transaction_log')
    op.drop_table('sample_status_log')
    op.drop_table('material_usage_log')
    op.drop_table('aliquot')
    op.drop_table('sample')
    op.drop_table('test_step_execution')
    op.drop_table('box')
    op.drop_table('test_step')
    op.drop_table('test_specification')
    op.drop_table('material_inventory_adjustment')
    op.drop_table('instrument_maintenance_log')
    op.drop_table('instrument_calibration')
    op.drop_table('freezer')
    op.drop_table('test_procedure')
    op.drop_table('test_parameter')
    op.drop_table('test_master')
    op.drop_table('storage_room')
    op.drop_table('material_lot')
    op.drop_table('instrument')
    op.drop_table('electronic_signature')
    op.drop_table('audit_trail')
    op.drop_table('users')
    op.drop_table('test_method')
    op.drop_table('storage_location')
    op.drop_table('sample_type')
    op.drop_table('product')
    op.drop_table('material')
    # ### end Alembic commands ###
